.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "RSA_get_ex_new_index 3"
.TH RSA_get_ex_new_index 3 "2017-01-09" "LibreSSL " "LibreSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RSA_get_ex_new_index, RSA_set_ex_data, RSA_get_ex_data \- add application
specific data to RSA structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/rsa.h>
\&
\& int RSA_get_ex_new_index(long argl, void *argp,
\&                CRYPTO_EX_new *new_func,
\&                CRYPTO_EX_dup *dup_func,
\&                CRYPTO_EX_free *free_func);
\&
\& int RSA_set_ex_data(RSA *r, int idx, void *arg);
\&
\& void *RSA_get_ex_data(RSA *r, int idx);
\&
\& typedef int CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
\&                           int idx, long argl, void *argp);
\& typedef void CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
\&                             int idx, long argl, void *argp);
\& typedef int CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d,
\&                           int idx, long argl, void *argp);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Several OpenSSL structures can have application specific data attached to them.
This has several potential uses, it can be used to cache data associated with
a structure (for example the hash of some part of the structure) or some
additional data (for example a handle to the data in an external library).
.PP
Since the application data can be anything at all it is passed and retrieved
as a \fBvoid *\fR type.
.PP
The \fB\f(BIRSA_get_ex_new_index()\fB\fR function is initially called to \*(L"register\*(R" some
new application specific data. It takes three optional function pointers which
are called when the parent structure (in this case an \s-1RSA\s0 structure) is
initially created, when it is copied and when it is freed up. If any or all of
these function pointer arguments are not used they should be set to \s-1NULL.\s0 The
precise manner in which these function pointers are called is described in more
detail below. \fB\f(BIRSA_get_ex_new_index()\fB\fR also takes additional long and pointer
parameters which will be passed to the supplied functions but which otherwise
have no special meaning. It returns an \fBindex\fR which should be stored
(typically in a static variable) and passed used in the \fBidx\fR parameter in
the remaining functions. Each successful call to \fB\f(BIRSA_get_ex_new_index()\fB\fR
will return an index greater than any previously returned, this is important
because the optional functions are called in order of increasing index value.
.PP
\&\fB\f(BIRSA_set_ex_data()\fB\fR is used to set application specific data, the data is
supplied in the \fBarg\fR parameter and its precise meaning is up to the
application.
.PP
\&\fB\f(BIRSA_get_ex_data()\fB\fR is used to retrieve application specific data. The data
is returned to the application, this will be the same value as supplied to
a previous \fB\f(BIRSA_set_ex_data()\fB\fR call.
.PP
\&\fB\f(BInew_func()\fB\fR is called when a structure is initially allocated (for example
with \fB\f(BIRSA_new()\fB\fR. The parent structure members will not have any meaningful
values at this point. This function will typically be used to allocate any
application specific structure.
.PP
\&\fB\f(BIfree_func()\fB\fR is called when a structure is being freed up. The dynamic parent
structure members should not be accessed because they will be freed up when
this function is called.
.PP
\&\fB\f(BInew_func()\fB\fR and \fB\f(BIfree_func()\fB\fR take the same parameters. \fBparent\fR is a
pointer to the parent \s-1RSA\s0 structure. \fBptr\fR is a the application specific data
(this wont be of much use in \fB\f(BInew_func()\fB\fR. \fBad\fR is a pointer to the
\&\fB\s-1CRYPTO_EX_DATA\s0\fR structure from the parent \s-1RSA\s0 structure: the functions
\&\fB\f(BICRYPTO_get_ex_data()\fB\fR and \fB\f(BICRYPTO_set_ex_data()\fB\fR can be called to manipulate
it. The \fBidx\fR parameter is the index: this will be the same value returned by
\&\fB\f(BIRSA_get_ex_new_index()\fB\fR when the functions were initially registered. Finally
the \fBargl\fR and \fBargp\fR parameters are the values originally passed to the same
corresponding parameters when \fB\f(BIRSA_get_ex_new_index()\fB\fR was called.
.PP
\&\fB\f(BIdup_func()\fB\fR is called when a structure is being copied. Pointers to the
destination and source \fB\s-1CRYPTO_EX_DATA\s0\fR structures are passed in the \fBto\fR and
\&\fBfrom\fR parameters respectively. The \fBfrom_d\fR parameter is passed a pointer to
the source application data when the function is called, when the function
returns the value is copied to the destination: the application can thus modify
the data pointed to by \fBfrom_d\fR and have different values in the source and
destination.  The \fBidx\fR, \fBargl\fR and \fBargp\fR parameters are the same as those
in \fB\f(BInew_func()\fB\fR and \fB\f(BIfree_func()\fB\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fB\f(BIRSA_get_ex_new_index()\fB\fR returns a new index or \-1 on failure (note 0 is a
valid index value).
.PP
\&\fB\f(BIRSA_set_ex_data()\fB\fR returns 1 on success or 0 on failure.
.PP
\&\fB\f(BIRSA_get_ex_data()\fB\fR returns the application data or 0 on failure. 0 may also
be valid application data but currently it can only fail if given an invalid
\&\fBidx\fR parameter.
.PP
\&\fB\f(BInew_func()\fB\fR and \fB\f(BIdup_func()\fB\fR should return 0 for failure and 1 for success.
.PP
On failure an error code can be obtained from
\&\fIERR_get_error\fR\|(3).
.SH "BUGS"
.IX Header "BUGS"
\&\fB\f(BIdup_func()\fB\fR is currently never called.
.PP
The return value of \fB\f(BInew_func()\fB\fR is ignored.
.PP
The \fB\f(BInew_func()\fB\fR function isn't very useful because no meaningful values are
present in the parent \s-1RSA\s0 structure when it is called.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrsa\fR\|(3), \fICRYPTO_set_ex_data\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
\&\fIRSA_get_ex_new_index()\fR, \fIRSA_set_ex_data()\fR and \fIRSA_get_ex_data()\fR are
available since SSLeay 0.9.0.
