.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "dsa 3"
.TH dsa 3 "2017-01-09" "LibreSSL " "LibreSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dsa \- Digital Signature Algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& #include <openssl/dsa.h>
\& #include <openssl/engine.h>
\&
\& DSA *  DSA_new(void);
\& void   DSA_free(DSA *dsa);
\&
\& int    DSA_size(const DSA *dsa);
\&
\& DSA *  DSA_generate_parameters(int bits, unsigned char *seed,
\&                int seed_len, int *counter_ret, unsigned long *h_ret,
\&                void (*callback)(int, int, void *), void *cb_arg);
\&
\& DH *   DSA_dup_DH(const DSA *r);
\&
\& int    DSA_generate_key(DSA *dsa);
\&
\& int    DSA_sign(int dummy, const unsigned char *dgst, int len,
\&                unsigned char *sigret, unsigned int *siglen, DSA *dsa);
\& int    DSA_sign_setup(DSA *dsa, BN_CTX *ctx, BIGNUM **kinvp,
\&                BIGNUM **rp);
\& int    DSA_verify(int dummy, const unsigned char *dgst, int len,
\&                const unsigned char *sigbuf, int siglen, DSA *dsa);
\&
\& void DSA_set_default_method(const DSA_METHOD *meth);
\& const DSA_METHOD *DSA_get_default_method(void);
\& int DSA_set_method(DSA *dsa, const DSA_METHOD *meth);
\& DSA *DSA_new_method(ENGINE *engine);
\& const DSA_METHOD *DSA_OpenSSL(void);
\&
\& int DSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
\&             int (*dup_func)(), void (*free_func)());
\& int DSA_set_ex_data(DSA *d, int idx, char *arg);
\& char *DSA_get_ex_data(DSA *d, int idx);
\&
\& DSA_SIG *DSA_SIG_new(void);
\& void   DSA_SIG_free(DSA_SIG *a);
\& int    i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
\& DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, unsigned char **pp, long length);
\&
\& DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
\& int    DSA_do_verify(const unsigned char *dgst, int dgst_len,
\&             DSA_SIG *sig, DSA *dsa);
\&
\& DSA *  d2i_DSAPublicKey(DSA **a, unsigned char **pp, long length);
\& DSA *  d2i_DSAPrivateKey(DSA **a, unsigned char **pp, long length);
\& DSA *  d2i_DSAparams(DSA **a, unsigned char **pp, long length);
\& int    i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
\& int    i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
\& int    i2d_DSAparams(const DSA *a,unsigned char **pp);
\&
\& int    DSAparams_print(BIO *bp, const DSA *x);
\& int    DSAparams_print_fp(FILE *fp, const DSA *x);
\& int    DSA_print(BIO *bp, const DSA *x, int off);
\& int    DSA_print_fp(FILE *bp, const DSA *x, int off);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These functions implement the Digital Signature Algorithm (\s-1DSA\s0).  The
generation of shared \s-1DSA\s0 parameters is described in
\&\fIDSA_generate_parameters\fR\|(3);
\&\fIDSA_generate_key\fR\|(3) describes how to
generate a signature key. Signature generation and verification are
described in \fIDSA_sign\fR\|(3).
.PP
The \fB\s-1DSA\s0\fR structure consists of several \s-1BIGNUM\s0 components.
.PP
.Vb 10
\& struct
\&        {
\&        BIGNUM *p;              // prime number (public)
\&        BIGNUM *q;              // 160\-bit subprime, q | p\-1 (public)
\&        BIGNUM *g;              // generator of subgroup (public)
\&        BIGNUM *priv_key;       // private key x
\&        BIGNUM *pub_key;        // public key y = g^x
\&        // ...
\&        }
\& DSA;
.Ve
.PP
In public keys, \fBpriv_key\fR is \s-1NULL.\s0
.PP
Note that \s-1DSA\s0 keys may use non-standard \fB\s-1DSA_METHOD\s0\fR implementations,
either directly or by the use of \fB\s-1ENGINE\s0\fR modules. In some cases (eg. an
\&\s-1ENGINE\s0 providing support for hardware-embedded keys), these \s-1BIGNUM\s0 values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using \s-1DSA\s0
structure elements directly and instead use \s-1API\s0 functions to query or
modify keys.
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
\&\s-1US\s0 Federal Information Processing Standard \s-1FIPS 186 \s0(Digital Signature
Standard, \s-1DSS\s0), \s-1ANSI X9.30\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIbn\fR\|(3), \fIdh\fR\|(3), \fIerr\fR\|(3), \fIrand\fR\|(3),
\&\fIrsa\fR\|(3), \fIsha\fR\|(3), \fIengine\fR\|(3),
\&\fIDSA_new\fR\|(3),
\&\fIDSA_size\fR\|(3),
\&\fIDSA_generate_parameters\fR\|(3),
\&\fIDSA_dup_DH\fR\|(3),
\&\fIDSA_generate_key\fR\|(3),
\&\fIDSA_sign\fR\|(3), \fIDSA_set_method\fR\|(3),
\&\fIDSA_get_ex_new_index\fR\|(3),
\&\fIRSA_print\fR\|(3)
