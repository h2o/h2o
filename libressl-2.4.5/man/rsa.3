.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "rsa 3"
.TH rsa 3 "2017-01-09" "LibreSSL " "LibreSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
rsa \- RSA public key cryptosystem
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& #include <openssl/rsa.h>
\& #include <openssl/engine.h>
\&
\& RSA * RSA_new(void);
\& void RSA_free(RSA *rsa);
\&
\& int RSA_public_encrypt(int flen, unsigned char *from,
\&    unsigned char *to, RSA *rsa, int padding);
\& int RSA_private_decrypt(int flen, unsigned char *from,
\&    unsigned char *to, RSA *rsa, int padding);
\& int RSA_private_encrypt(int flen, unsigned char *from,
\&    unsigned char *to, RSA *rsa,int padding);
\& int RSA_public_decrypt(int flen, unsigned char *from,
\&    unsigned char *to, RSA *rsa,int padding);
\&
\& int RSA_sign(int type, unsigned char *m, unsigned int m_len,
\&    unsigned char *sigret, unsigned int *siglen, RSA *rsa);
\& int RSA_verify(int type, unsigned char *m, unsigned int m_len,
\&    unsigned char *sigbuf, unsigned int siglen, RSA *rsa);
\&
\& int RSA_size(const RSA *rsa);
\&
\& RSA *RSA_generate_key(int num, unsigned long e,
\&    void (*callback)(int,int,void *), void *cb_arg);
\&
\& int RSA_check_key(RSA *rsa);
\&
\& int RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
\& void RSA_blinding_off(RSA *rsa);
\&
\& void RSA_set_default_method(const RSA_METHOD *meth);
\& const RSA_METHOD *RSA_get_default_method(void);
\& int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
\& const RSA_METHOD *RSA_get_method(const RSA *rsa);
\& RSA_METHOD *RSA_PKCS1_SSLeay(void);
\& RSA_METHOD *RSA_null_method(void);
\& int RSA_flags(const RSA *rsa);
\& RSA *RSA_new_method(ENGINE *engine);
\&
\& int RSA_print(BIO *bp, RSA *x, int offset);
\& int RSA_print_fp(FILE *fp, RSA *x, int offset);
\&
\& int RSA_get_ex_new_index(long argl, char *argp, int (*new_func)(),
\&    int (*dup_func)(), void (*free_func)());
\& int RSA_set_ex_data(RSA *r,int idx,char *arg);
\& char *RSA_get_ex_data(RSA *r, int idx);
\&
\& int RSA_sign_ASN1_OCTET_STRING(int dummy, unsigned char *m,
\&    unsigned int m_len, unsigned char *sigret, unsigned int *siglen,
\&    RSA *rsa);
\& int RSA_verify_ASN1_OCTET_STRING(int dummy, unsigned char *m,
\&    unsigned int m_len, unsigned char *sigbuf, unsigned int siglen,
\&    RSA *rsa);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These functions implement \s-1RSA\s0 public key encryption and signatures
as defined in \s-1PKCS\s0 #1 v2.0 [\s-1RFC 2437\s0].
.PP
The \fB\s-1RSA\s0\fR structure consists of several \s-1BIGNUM\s0 components. It can
contain public as well as private \s-1RSA\s0 keys:
.PP
.Vb 10
\& struct
\&        {
\&        BIGNUM *n;              // public modulus
\&        BIGNUM *e;              // public exponent
\&        BIGNUM *d;              // private exponent
\&        BIGNUM *p;              // secret prime factor
\&        BIGNUM *q;              // secret prime factor
\&        BIGNUM *dmp1;           // d mod (p\-1)
\&        BIGNUM *dmq1;           // d mod (q\-1)
\&        BIGNUM *iqmp;           // q^\-1 mod p
\&        // ...
\&        };
\& RSA
.Ve
.PP
In public keys, the private exponent and the related secret values are
\&\fB\s-1NULL\s0\fR.
.PP
\&\fBp\fR, \fBq\fR, \fBdmp1\fR, \fBdmq1\fR and \fBiqmp\fR may be \fB\s-1NULL\s0\fR in private
keys, but the \s-1RSA\s0 operations are much faster when these values are
available.
.PP
Note that \s-1RSA\s0 keys may use non-standard \fB\s-1RSA_METHOD\s0\fR implementations,
either directly or by the use of \fB\s-1ENGINE\s0\fR modules. In some cases (eg. an
\&\s-1ENGINE\s0 providing support for hardware-embedded keys), these \s-1BIGNUM\s0 values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using \s-1RSA\s0
structure elements directly and instead use \s-1API\s0 functions to query or
modify keys.
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
\&\s-1SSL, PKCS\s0 #1 v2.0
.SH "PATENTS"
.IX Header "PATENTS"
\&\s-1RSA\s0 was covered by a \s-1US\s0 patent which expired in September 2000.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIrsa\fR\|(1), \fIbn\fR\|(3), \fIdsa\fR\|(3), \fIdh\fR\|(3),
\&\fIrand\fR\|(3), \fIengine\fR\|(3), \fIRSA_new\fR\|(3),
\&\fIRSA_public_encrypt\fR\|(3),
\&\fIRSA_sign\fR\|(3), \fIRSA_size\fR\|(3),
\&\fIRSA_generate_key\fR\|(3),
\&\fIRSA_check_key\fR\|(3),
\&\fIRSA_blinding_on\fR\|(3),
\&\fIRSA_set_method\fR\|(3), \fIRSA_print\fR\|(3),
\&\fIRSA_get_ex_new_index\fR\|(3),
\&\fIRSA_private_encrypt\fR\|(3),
\&\fIRSA_sign_ASN1_OCTET_STRING\fR\|(3),
\&\fIRSA_padding_add_PKCS1_type_1\fR\|(3)
